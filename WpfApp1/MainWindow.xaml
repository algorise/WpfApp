<Window x:Class="WpfApp1.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfApp1"
        mc:Ignorable="d"
        Title="MainWindow" Height="500" Width="500">

    <!-- Color Buttons Example
    <Window.Resources>
        <Style TargetType="TextBlock">
            <Setter Property="HorizontalAlignment" Value ="Center" />
            <Setter Property="FontFamily" Value="Comic Sans MS" />
            <Setter Property="FontSize" Value="14" />
        </Style>
    </Window.Resources>
    -->

    <!-- Fundamentals -->
    <!--  Overview 
            In markup the window element must include the x:Class atrribute. it is necessary because when it app is build, the existence
             x:Class attribute causes the MSbuild engine to generate a partial class that derives from the window with the name that is specified by the x:Class attribute.
             This requires the addition of an XML namespaces declaration for xaml schema:
             xmlns:x=http..xaml
             This partial class implements the InializeComponent method, which is called to register the events and set the properties that are implemented in markup.
            
            - the name of partial class is the same as specified by x:Class attribute in markup and it must derive from Window. This is done so to associate the code behind the file with the partial class generated for markup file
            - In the code behind, the Window class must implement a constructor that calls the InitializeComponent method. This method is implemented by the markup file's generated partial class to register events and set the properties that are defined in the markup.
        -->

    <!--  Dialogue Boxes
            Common Tasks
    -->
    <!--
    <StackPanel>
        <Button Name="ToRed" Click="ToRedOnHover" ClickMode="Hover"
                Margin="">
            <TextBlock Text="Hover here to make the buttons RED." />
        </Button>

        <Button Name="ToPurple" Click="ToPurpleOnPress" ClickMode="Press">
            <TextBlock Text="Press here to make the buttons PURPLE." />
        </Button>
        <Button Name="ToWhite"
                PreviewMouseDown="OnMouseDown"
                PreviewMouseUp="OnMouseUp"
                >
            <TextBlock Text="Press here to make the buttons WHITE and BLACK on release." />

        </Button>
    </StackPanel>
    -->

    <!-- Combo Box Example
    <Grid>
        
        <TextBox x:Name="textBox" Width="200" Height="30" VerticalAlignment="Top" Margin="0,10,0,0" />
        
        <Button Content="Add an Item" Width="200" Height="30" VerticalAlignment="Top" Margin="0,50,0,0" Click="Button_Click" />

        <ComboBox x:Name="comboBox" Width="200" Height="30" SelectedIndex="0" Margin="9, 0, 0, 250"
                  TabIndex="0" IsDropDownOpen="True" IsSynchronizedWithCurrentItem="False"/>

    </Grid>
    -->

    <!-- Data Binding Example -->

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="483*"/>
            <ColumnDefinition Width="17*"/>
        </Grid.ColumnDefinitions>

        <Grid.DataContext>
            <Binding Source="StaticResource textBox" />
        </Grid.DataContext>

        <TextBox x:Name="textBox" Width="200" Height="30" VerticalAlignment="Top" Margin="150,40,133,0"
                 Background="LightYellow" />

        <Button x:Name="ColorButton" Content="OneWay Binding" Width="200" Height="30" VerticalAlignment="Top" Margin="150,80,133,0" 
                Background="{Binding ElementName=textBox, Path=Text, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}"
                />
        <TextBox x:Name="textBox2" Width="200" Height="30" VerticalAlignment="Top" Margin="150,150,133,0"
                 Background="{Binding ElementName=ColorButton2, Path=Background, UpdateSourceTrigger=PropertyChanged}"/>

        <Button x:Name="ColorButton2" Content="TwoWay Binding" Width="200" Height="30" VerticalAlignment="Top" Margin="150,190,133,0" 
                Background="{Binding ElementName=textBox2, Path=Text, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}"
                />
    </Grid>

</Window>